# Autogenerated with SMOP version 
# /usr/local/bin/smop eulerFreq.m

from __future__ import division
try:
    from runtime import *
except ImportError:
    from smop.runtime import *

def eulerFreq_(L=None,diameter=None,T=None,K_elec=None,F_mag=None,pos=None,stepCount=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 7-[L,diameter,T,K_elec,F_mag,pos,stepCount].count(None)+len(args)

    rOut=diameter / 2
    mCNT=rhoA * 0.735 * pi * diameter * L
    momentInertia=(pi / 4) * (rOut ** 4)
    epsilon=0
    escapeIn=- 9999
    spatialElements=1000000.0
    z=linspace_(0,1,spatialElements)
    step=arange_(1,stepCount)
    freqs=quickFreq_(L,diameter,T,stepCount)
    freqStart=freqs[end()]
    threshold=epsilon * freqStart
    threshold=1
    slowFactor=1
    errorSlow=1
    slowFactorCountdown=2000
    slowFactorPeriod=2000
    nu=(1 / L ** 2) * sqrt_(E * momentInertia / (mCNT / L))
    omegaPrimeInit=freqStart / nu
    TPrime=T * L ** 2 / (E * momentInertia)
    kPrime=sqrt_(TPrime)
    lDcPrime=K_elec * L ** 4 / (E * momentInertia * rOut)
    lMagPrime=F_mag * L ** 3 / (E * momentInertia * rOut)
    a=copy_(pos)
    k=copy_(kPrime)
    sinhka=sinh_(k * a)
    sinhk=sinh_(k)
    sinhkLa=sinh_(k * (1 - a))
    coshka=cosh_(k * a)
    coshk=cosh_(k)
    coshkLa=cosh_(k * (1 - a))
    sigma1=(coshk - coshka + coshkLa - k * (1 - a) * sinhk - 1)
    sigma2=(sinhka - sinhk + sinhkLa + a * k + k * (1 - a) * coshk - k * coshkLa)
    sigma3=k * sinhk - 2 * coshk + 2
    d2udz0=((lDcPrime / (2 * kPrime ** 2)) * ((kPrime * sinh_(kPrime)) / (cosh_(kPrime) - 1) - 2) + lMagPrime * sigma2 / (kPrime * sigma3))
    d2udz1=((lDcPrime / (2 * kPrime ** 2)) * ((kPrime * sinh_(kPrime)) / (cosh_(kPrime) - 1) - 2) + lMagPrime / (kPrime * sigma3) * (sigma1 * sinhk + sigma2 * coshk) + lMagPrime / kPrime * sinhkLa)
    d3udz0=- lDcPrime / 2 + lMagPrime * sigma1 / sigma3
    d3udz1=lDcPrime / 2 + lMagPrime / sigma3 * (sigma1 * coshk + sigma2 * sinhk) + lMagPrime * coshkLa
    d3udzAdiscont=copy_(lMagPrime)
    d5udzAdiscont=kPrime ** 2 * lMagPrime
    for j in step.reshape(-1):
        if kPrime > 19:
            resFreq[1]=0
            break
        kPlus=1 / 2 * sqrt_(- 2 * TPrime + 2 * sqrt_(TPrime ** 2 + 4 * omegaPrimeInit ** 2))
        kMinus=1 / 2 * sqrt_(2 * TPrime + 2 * sqrt_(TPrime ** 2 + 4 * omegaPrimeInit ** 2))
        cospa=cos_(kPlus * a)
        sinpa=sin_(kPlus * a)
        cospLa=cos_(kPlus * (1 - a))
        sinpLa=sin_(kPlus * (1 - a))
        coshma=cosh_(kMinus * a)
        sinhma=sinh_(kMinus * a)
        coshmLa=cosh_(kMinus * (1 - a))
        sinhmLa=sinh_(kMinus * (1 - a))
        TacC1=TacC1_calc_(kPrime,kPlus,lDcPrime,lMagPrime,a)
        TacC2=TacC2_calc_(kPrime,kPlus,lDcPrime,lMagPrime,a)
        TacC3=TacC3_calc_(kPrime,kMinus,lDcPrime,lMagPrime,a)
        TacC4=TacC4_calc_(kPrime,kMinus,lDcPrime,lMagPrime,a)
        TacB1=TacB1_calc_(kPrime,kPlus,lDcPrime,lMagPrime,a)
        TacB2=TacB2_calc_(kPrime,kPlus,lDcPrime,lMagPrime,a)
        TacB3=TacB3_calc_(kPrime,kMinus,lDcPrime,lMagPrime,a)
        TacB4=TacB4_calc_(kPrime,kMinus,lDcPrime,lMagPrime,a)
        TacB5=TacE_calc_(kPrime,lDcPrime,lMagPrime,a)
        line1=matlabarray([1,0,1,0,0,0,0,0,d2udz0])
        line2=matlabarray([0,kPlus,0,kMinus,0,0,0,0,d3udz0])
        line3=matlabarray([0,0,0,0,1,0,1,0,d2udz1])
        line4=matlabarray([0,0,0,0,0,- kPlus,0,- kMinus,d3udz1])
        line5=matlabarray([cospa,sinpa,coshma,sinhma,- cospLa,- sinpLa,- coshmLa,- sinhmLa,0])
        line6=matlabarray([- kPlus * sinpa,kPlus * cospa,kMinus * sinhma,kMinus * coshma,- kPlus * sinpLa,kPlus * cospLa,kMinus * sinhmLa,kMinus * coshmLa,- d3udzAdiscont])
        line7=matlabarray([- kPlus ** 2 * cospa,- kPlus ** 2 * sinpa,kMinus ** 2 * coshma,kMinus ** 2 * sinhma,kPlus ** 2 * cospLa,kPlus ** 2 * sinpLa,- kMinus ** 2 * coshmLa,- kMinus ** 2 * sinhmLa,0])
        line8=matlabarray([kPlus ** 3 * sinpa,- kPlus ** 3 * cospa,kMinus ** 3 * sinhma,kMinus ** 3 * coshma,kPlus ** 3 * sinpLa,- kPlus ** 3 * cospLa,kMinus ** 3 * sinhmLa,kMinus ** 3 * coshmLa,- d5udzAdiscont])
        line9=matlabarray([TacC1,TacC2,TacC3,TacC4,TacB1,TacB2,TacB3,TacB4[TacB5 + omegaPrimeInit ** 2]])
        solverMatrix=matlabarray([[line1],[line2],[line3],[line4],[line5],[line6],[line7],[line8],[line9]])
        soln=det_(solverMatrix)
        if j == 1:
            initSoln=copy_(soln)
        if abs_(soln) < epsilon:
            resFreq[j]=omegaPrimeInit * nu
            break
        if slowFactorCountdown < 1 and 0.95 * mean_(abs_(resFreq[j - 50:j - 45] - resFreq[j - 1])) < mean_(abs_(resFreq[j - 25:j - 20] - resFreq[j - 1])):
            slowFactor=slowFactor * 0.1
            slowFactorCountdown=copy_(slowFactorPeriod)
        if abs_(TPrime) > 12:
            resFreq[j]=omegaPrimeInit * nu * (1 + (0.05 - 0.03 * j / stepCount) * 5.0 * slowFactor * errorSlow * soln / (abs_(initSoln) ** (12 / 11)))
        else:
            if abs_(TPrime) > 5:
                resFreq[j]=omegaPrimeInit * nu * (1 + (0.05 - 0.03 * j / stepCount) * 0.5 * slowFactor * errorSlow * soln / (abs_(initSoln) ** (12 / 11)))
            else:
                if abs_(TPrime) > 1:
                    resFreq[j]=omegaPrimeInit * nu * (1 + (0.05 - 0.03 * j / stepCount) * 0.05 * slowFactor * errorSlow * soln / (abs_(initSoln) ** (12 / 11)))
                else:
                    if abs_(TPrime) > 1e-05:
                        resFreq[j]=omegaPrimeInit * nu * (1 + (0.05 - 0.03 * j / stepCount) * slowFactor * errorSlow * 0.001 * soln / max_(abs_(initSoln),1))
                    else:
                        resFreq[j]=omegaPrimeInit * nu * (1 + (0.05 - 0.03 * j / stepCount) * slowFactor * errorSlow * 0.001 * soln / max_(abs_(initSoln),1))
        if abs_(log10_((resFreq[j] / freqStart))) > 1:
            if j < 4:
                resFreq[j]=freqStart
            else:
                resFreq[j]=resFreq[j - 3]
            errorSlow=errorSlow * 0.1
        omegaPrimeInit=resFreq[j] / nu
        if j > 5 and mean_(abs_(resFreq[j - 4:j - 1] - resFreq[j])) < threshold and escapeIn < - 1:
            escapeIn=3
        if escapeIn < 1 and escapeIn > - 1:
            break
        escapeIn=escapeIn - 1
        slowFactorCountdown=slowFactorCountdown - 1
        tmp[j]=soln
    return resFreq,step,soln,tmp,solverMatrix

def quickFreq_(L=None,diameter=None,T=None,stepCount=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 4-[L,diameter,T,stepCount].count(None)+len(args)

    rOut=diameter / 2
    rIn=rOut - wallThickness
    mCNT=rhoA * 0.735 * pi * diameter * L
    momentInertia=(pi / 4) * (rOut ** 4)
    epsilon=1e-12
    xi=sqrt_(T / (E * momentInertia))
    step=arange_(1,stepCount)
    if xi * L < 1:
        freqStart=sqrt_(E * momentInertia / (mCNT / L)) * (22.38 / L ** 2 + 0.28 * xi ** 2)
    else:
        freqStart=sqrt_(E * momentInertia / (mCNT / L)) * (2 * pi / L ** 2 + pi * xi / L)
    threshold=epsilon * freqStart
    escapeIn=9999999
    for k in step.reshape(-1):
        _lambda=sqrt_(mCNT / (L * E * momentInertia)) * freqStart
        yPlus=(L / sqrt_(2)) * sqrt_(sqrt_(xi ** 4 + 4 * _lambda ** 2) + xi ** 2)
        yMinus=(L / sqrt_(2)) * sqrt_(sqrt_(xi ** 4 + 4 * _lambda ** 2) - xi ** 2)
        soln=cosh_(yPlus) * cos_(yMinus) - (yPlus ** 2 - yMinus ** 2) / (2 * yPlus * yMinus) * sinh_(yPlus) * sin_(yMinus)
        resFreq[k]=freqStart * (1 - (0.05 - 0.04 * k / stepCount) * (soln - 1) / exp_(yPlus))
        freqStart=resFreq[k]
        if k > 2 and abs_(resFreq[k] - resFreq[k - 1]) < threshold and escapeIn > 10:
            escapeIn=3
        if escapeIn < 1:
            break
        escapeIn=escapeIn - 1
    return resFreq,step,soln

def TacB4_calc_(k=None,m=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 5-[k,m,fDc,fMag,a].count(None)+len(args)

    sigma10=k * sinh_(k) - 2 * cosh_(k) + 2
    sigma9=k ** 2 - m ** 2
    sigma8=cosh_(m * (a - 1))
    sigma7=sinh_(m * (a - 1))
    sigma6=k ** 2 * m * sigma10
    sigma5=k ** 2 * sigma9 * sigma10
    sigma3=k * (sinh_(k) - sinh_(a * k) * sigma8) + m * sigma7 * cosh_(a * k)
    sigma4=k * (cosh_(k) - cosh_(a * k) * sigma8) + m * sigma7 * sinh_(a * k)
    sigma2=sinh_(k * (a - 1))
    sigma1=cosh_(k * (a - 1))
    DCPart=sigma3 / (2 * k ** 2 * sigma9) - (a * m * sigma7 - sigma8 + 1) / (k ** 2 * m ** 2) + sigma7 / (2 * k ** 2 * m) - (sinh_(k) * sigma4) / (2 * k ** 2 * (cosh_(k) - 1) * sigma9)
    magLine1=(k * sigma2 - m * sigma7) / (k ** 2 * sigma9) - sigma7 / (k ** 2 * m) + sigma3 / sigma5 + sigma7 / sigma6 + (sigma1 * sigma4) / (k * sigma9 * sigma10) + (sinh_(k) * sigma3) / (k * sigma9 * sigma10) - sigma1 * sigma3 / sigma5 + sigma2 * sigma4 / sigma5 + sigma7 * (cosh_(a * k) - cosh_(k)) / sigma6 + sigma7 * sinh_(k) / (k * m * sigma10) - a * sigma4 / (k * sigma9 * sigma10) - sigma7 * sigma1 / sigma6 + cosh_(a * k) * sigma3 / sigma5 - sinh_(a * k) * sigma4 / sigma5 - cosh_(k) * sigma4 / (k * sigma9 * sigma10) - cosh_(k) * sigma3 / sigma5 + sinh_(k) * sigma4 / sigma5
    magLine2=(a * cosh_(k) * sigma4) / (k * sigma9 * sigma10) - (a * sinh_(k) * sigma3) / (k * sigma9 * sigma10) - a * sigma7 * sinh_(k) / (k * m * sigma10)
    TacB4=fDc * 4 * m * DCPart + fMag * 4 * m * (magLine1 + magLine2)
    return TacB4
def TacB3_calc_(k=None,m=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 5-[k,m,fDc,fMag,a].count(None)+len(args)

    s10=k * sinh_(k) - 2 * cosh_(k) + 2
    s9=k ** 2 - m ** 2
    s8=sinh_(m * (a - 1))
    s7=cosh_(m * (a - 1))
    s6=k ** 2 * m * s10
    s5=k ** 2 * s9 * s10
    s4=m * (cosh_(k) - cosh_(a * k) * s7) + k * s8 * sinh_(a * k)
    s3=m * (sinh_(k) - sinh_(a * k) * s7) + k * s8 * cosh_(a * k)
    s2=cosh_(k * (a - 1))
    s1=(sinh_(m * (a - 1) / 2)) ** 2
    DcPart=(s8 - m * (a * s7 - 1)) / (k ** 2 * m ** 2) + s1 / (k ** 2 * m) - s4 / (2 * k ** 2 * s9) + sinh_(k) * s3 / (2 * k ** 2 * (cosh_(k) - 1) * s9)
    magLine1=2 * s1 / (k ** 2 * m) + (s4 - s2 * s4 + sinh_(k) * s3 + sinh_(k * (a - 1)) * s3 + cosh_(a * k) * s4 - sinh_(a * k) * s3 - cosh_(k) * s4) / s5 - m * (s2 - s7) / (k ** 2 * s9) + (- 2 * s1 - s1 * 2 * cosh_(a * k) + s1 * cosh_(k) * 2 + 2 * s1 * s2) / s6
    magLine2=(s2 * s3 - a * s3 - cosh_(k) * s3 + sinh_(k) * s4 + a * cosh_(k) * s3 - a * sinh_(k) * s4) / (k * s9 * s10) + (- 2 * s1 * sinh_(k) + a * 2 * s1 * sinh_(k)) / (k * m * s10)
    TacB3=- fDc * 4 * m * DcPart + fMag * 4 * m * (magLine1 + magLine2)
    return TacB3
def TacB2_calc_(k=None,p=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 5-[k,p,fDc,fMag,a].count(None)+len(args)

    C=copy_(fDc)
    M=copy_(fMag)
    s24=cos_(p * (1 - a))
    s23=sin_(p * (1 - a))
    s22=8 * C * k ** 2 * s24
    s21=8 * C * p ** 2 * s24
    s20=8 * C * a * k ** 2 * p * s23
    s19=4 * M * a * k * p ** 3 * s23
    s18=8 * C * a * p ** 3 * s23
    s17=2 * C * k * p ** 3 * s23
    s16=4 * C * k ** 2 * p * s23
    s15=4 * C * k * p ** 2 * s24
    s14=4 * M * k * p ** 2 * s24
    s13=4 * C * p ** 3 * s23
    s12=4 * M * k ** 2 * p * s23
    s11=8 * C * k ** 2
    s10=8 * C * p ** 2
    s9=2 * k ** 4 * p
    s8=k - 2 * a * k
    s7=4 * M * k * p ** 2
    s6=2 * C * k ** 2 * p ** 2
    s5=4 * M * k ** 2 * p ** 2
    s4=2 * k ** 2 * p ** 3
    s3=4 * M * a * k ** 2 * p ** 2
    s2=cosh_(k * (1 - a))
    s1=sinh_(k * (1 - a))
    denom=(- s9 - s4) * cosh_(k) + (k ** 5 * p + k ** 3 * p ** 3) * sinh_(k) + s9 + s4
    Ccoshk=s22 - s10 - s6 - s11 + s21 + s13 - s18 + s16 - s12 - s3 - 2 * M * k ** 2 * p ** 2 * s24 - s20
    Csinhk=4 * C * k ** 3 * (1 - s24) + 8 * C * k * p ** 2 + s7 - s15 + s14 - s17 - 2 * C * k ** 3 * p * s23 - 2 * M * k * p ** 3 * s23 + 4 * C * a * k * p ** 3 * s23 + 4 * C * a * k ** 3 * p * s23 + s19 + 4 * M * a * k ** 3 * p * s23
    Ccoshak=s5 + s13 - s12 + 2 * C * k ** 2 * p ** 2 * s24 + 4 * M * a * k ** 2 * p ** 2 * s24
    Csinhak=- s7 - s15 - s14 - s17 - s19
    line01=s11 + s10 - s6 - s5 - s22 - s21 - s13 - 4 * C * p ** 3 * s2 * s23 + s18 - s16 - 4 * M * k * p ** 2 * s1 + s12 + s3 + 4 * M * k ** 2 * p ** 2 * s2 * s24 - 2 * M * k ** 2 * p ** 2 * cosh_(s8) * s24 - 4 * C * k * p ** 2 * s24 * s1 + s20 - 4 * M * k * p ** 2 * s24 * s1
    line2=4 * M * k ** 2 * p * s2 * s23 + 2 * C * k * p ** 3 * s1 * s23 + 4 * M * k * p ** 3 * s1 * s23 - 2 * M * k * p ** 3 * sinh_(s8) * s23 + 2 * C * k ** 2 * p ** 2 * s2 * s24 - 4 * M * a * k * p ** 3 * s1 * s23 - 4 * M * a * k ** 2 * p ** 2 * s2 * s24
    TacB2=(Ccoshk * cosh_(k) + Csinhk * sinh_(k) + Ccoshak * cosh_(a * k) + Csinhak * sinh_(a * k) + line01 + line2) / denom
    return TacB2
def TacB1_calc_(k=None,p=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 5-[k,p,fDc,fMag,a].count(None)+len(args)

    C=copy_(fDc)
    M=copy_(fMag)
    s20=sin_(p * (1 - a))
    s19=cos_(p * (1 - a))
    s18=8 * C * k ** 2 * s20
    s17=8 * C * p ** 2 * s20
    s16=8 * C * a * p ** 3 * s19
    s15=2 * C * k * p ** 3 * s19
    s14=4 * C * k ** 2 * p * s19
    s13=4 * C * k * p ** 2 * s20
    s12=4 * M * k * p ** 2 * s20
    s11=8 * C * a * k ** 2 * p * s19
    s10=4 * M * a * k * p ** 3 * s19
    s9=4 * C * p ** 3 * s19
    s8=4 * M * k ** 2 * p * s19
    s7=2 * k ** 4 * p
    s6=k - 2 * a * k
    s5=4 * C * k ** 2 * p
    s4=2 * k ** 2 * p ** 3
    s3=4 * M * k ** 2 * p
    s2=sinh_(k * (1 - a))
    s1=cosh_(k * (1 - a))
    denom=(- s7 - s4) * cosh_(k) + (k ** 5 * p + k ** 3 * p ** 3) * sinh_(k) + s7 + s4
    Ccoshk=s9 + s5 - s18 - s17 + s3 - s16 + s14 - s8 + 2 * M * k ** 2 * p ** 2 * s20 - s11
    Csinhk=4 * C * k ** 3 * s20 - 2 * C * k ** 3 * p - s15 - 2 * C * k ** 3 * p * s19 - 4 * M * a * k ** 3 * p - 2 * M * k * p ** 3 * s19 + s13 - s12 + 4 * C * a * k * p ** 3 * s19 + 4 * C * a * k ** 3 * p * s19 + s10 + 4 * M * a * k ** 3 * p * s19
    Ccoshak=s9 + s3 - s8 - 2 * C * k ** 2 * p ** 2 * s20 - 4 * M * a * k ** 2 * p ** 2 * s20
    Csinhak=s13 - s15 + s12 - s10
    line0=s18 - s5 - s9 + s17 - s3
    line1=- 4 * C * p ** 3 * s1 * s19 + s16 - s14 - 4 * M * k ** 2 * p * s1 + s8 - 2 * C * k ** 2 * p ** 2 * s1 * s20 - 4 * M * k ** 2 * p ** 2 * s1 * s20 + 2 * M * k ** 2 * p ** 2 * cosh_(s6) * s20 + s11 + 4 * M * k ** 2 * p * s1 * s19 + 2 * C * k * p ** 3 * s19 * s2 + 4 * M * k * p ** 3 * s19 * s2
    line2=- 2 * M * k * p ** 3 * s19 * sinh_(s6) + 4 * C * k * p ** 2 * s2 * s20 + 4 * M * k * p ** 2 * s2 * s20 - 4 * M * a * k * p ** 3 * s19 * s2 + 4 * M * a * k ** 2 * p ** 2 * s1 * s20
    TacB1=(Ccoshk * cosh_(k) + Csinhk * sinh_(k) + Ccoshak * cosh_(a * k) + Csinhak * sinh_(a * k) + line0 + line1 + line2) / denom
    return TacB1
def TacC4_calc_(k=None,m=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 5-[k,m,fDc,fMag,a].count(None)+len(args)

    s7=k * sinh_(k) - 2 * cosh_(k) + 2
    s6=k ** 2 - m ** 2
    s5=k ** 2 * m * s7
    s4=k ** 2 * s6 * s7
    s3=cosh_(k * (a - 1))
    s2=k * cosh_(a * m) * sinh_(a * k) - m * cosh_(a * k) * sinh_(a * m)
    s1=k * (cosh_(a * k) * cosh_(a * m) - 1) - m * sinh_(a * k) * sinh_(a * m)
    DcPart=(a * m * sinh_(a * m) - cosh_(a * m) + 1) / (k ** 2 * m ** 2) + s2 / (2 * k ** 2 * s6) - sinh_(a * m) / (2 * k ** 2 * m) - sinh_(k) * s1 / (2 * k ** 2 * (cosh_(k) - 1) * s6)
    magLine1=(- sinh_(a * m) + sinh_(a * m) * s3 - cosh_(a * k) * sinh_(a * m) + sinh_(a * m) * cosh_(k)) / s5 + (s2 - sinh_(a * k) * s1 + cosh_(a * k) * s2 + sinh_(k) * s1 + sinh_(k * (a - 1)) * s1 - cosh_(k) * s2 - s2 * s3) / s4
    magLine2=(- sinh_(a * m) * sinh_(k) + a * sinh_(a * m) * sinh_(k)) / (k * m * s7) + (- cosh_(k) * s1 + s3 * s1 + sinh_(k) * s2 - a * s1 - a * sinh_(k) * s2 + a * cosh_(k) * s1) / (k * s6 * s7)
    TacC4=fDc * (- 4 * m) * DcPart + fMag * (- 4 * m) * (magLine1 + magLine2)
    return TacC4
def TacC3_calc_(k=None,m=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 5-[k,m,fDc,fMag,a].count(None)+len(args)

    s8=k * sinh_(k) - 2 * cosh_(k) + 2
    s7=k ** 2 - m ** 2
    s6=k ** 2 * m * s8
    s5=k ** 2 * s7 * s8
    s4=cosh_(k * (a - 1))
    s3=(sinh_(a * m / 2)) ** 2
    s2=k * cosh_(a * k) * sinh_(a * m) - m * cosh_(a * m) * sinh_(a * k)
    s1=m * (cosh_(a * k) * cosh_(a * m) - 1) - k * sinh_(a * k) * sinh_(a * m)
    DcPart=(sinh_(a * m) - a * m * cosh_(a * m)) / (k ** 2 * m ** 2) + s1 / (2 * k ** 2 * s7) + s3 / (k ** 2 * m) + sinh_(k) * s2 / (2 * k ** 2 * (cosh_(k) - 1) * s7)
    magLine1=(- s1 - cosh_(a * k) * s1 + cosh_(k) * s1 - sinh_(a * k) * s2 + s4 * s1 + sinh_(k) * s2 + sinh_(k * (a - 1)) * s2) / s5 + (- s3 * 2 - cosh_(a * k) * 2 * s3 + s3 * cosh_(k) * 2 + s3 * s4 * 2) / s6
    magLine2=(- a * s2 - sinh_(k) * s1 - cosh_(k) * s2 + s4 * s2 + a * sinh_(k) * s1 + a * cosh_(k) * s2) / (k * s7 * s8) + (- s3 * 2 * sinh_(k) + a * s3 * 2 * sinh_(k)) / (k * m * s8)
    TacC3=fDc * 4 * m * DcPart + fMag * (- 4 * m) * (magLine1 + magLine2)
    return TacC3
def TacC2_calc_(k=None,p=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 5-[k,p,fDc,fMag,a].count(None)+len(args)

    C=copy_(fDc)
    M=copy_(fMag)
    s21=sinh_(k * (1 - a))
    s20=cosh_(k * (1 - a))
    s19=4 * M * k * p ** 2 * s21
    s18=4 * M * k ** 2 * p ** 2 * s20
    s17=4 * C * k ** 3
    s16=2 * k ** 4 * p
    s15=k - 2 * a * k
    s14=8 * C * a * p ** 3
    s13=2 * C * k * p ** 3
    s12=4 * C * k * p ** 2
    s11=4 * C * k ** 2 * p
    s10=8 * C * a * k ** 2 * p
    s9=4 * M * a * k * p ** 3
    s8=2 * k ** 2 * p ** 3
    s7=4 * C * p ** 3
    s6=4 * M * k ** 2 * p
    s5=8 * C * k ** 2
    s4=8 * C * p ** 2
    s3=4 * M * k * p ** 2
    s2=2 * C * k ** 2 * p ** 2
    s1=4 * M * a * k ** 2 * p ** 2
    line1=(s1 + s2) * cos_(a * p) * cosh_(a * k) + (s3 - s12 - s17) * cos_(a * p) * sinh_(k) + (- s12 - s3) * cos_(a * p) * sinh_(a * k) + (- 2 * M * k ** 2 * p ** 2 + s5 + s4) * cos_(a * p) * cosh_(k)
    line2=(2 * C * k ** 2 * p ** 2 * s20 - s4 - 4 * C * k * p ** 2 * s21 - s19 - s5 + s18 - 2 * M * k ** 2 * p ** 2 * cosh_(s15) - 4 * M * a * k ** 2 * p ** 2 * s20) * cos_(a * p) + (s6 - s7) * sin_(a * p) * cosh_(a * k)
    line3=(s13 + 2 * C * k ** 3 * p + 2 * M * k * p ** 3 + 4 * M * k ** 3 * p - 4 * C * a * k * p ** 3 - 4 * C * a * k ** 3 * p - s9 - 4 * M * a * k ** 3 * p) * sin_(a * p) * sinh_(k) + (s13 + s9) * sin_(a * p) * sinh_(a * k)
    line4=(s14 - s7 - s11 - s6 + s10) * sin_(a * p) * cosh_(k) + (s7 + 4 * C * p ** 3 * s20 - s14 + s11 + s6 - s10 - 4 * M * k ** 2 * p * s20 - 2 * C * k * p ** 3 * s21 - 4 * M * k * p ** 3 * s21 + 2 * M * k * p ** 3 * sinh_(s15) + 4 * M * a * k * p ** 3 * s21) * sin_(a * p)
    line5=(s17 + 8 * C * k * p ** 2 + s3) * sinh_(k) - s3 * sinh_(a * k) + (s1 - s4 - s2 - 4 * M * k ** 2 * p ** 2 - s5) * cosh_(k) + s5 + s4 - s2 - s19 + s18 - s1
    denom=(k ** 5 * p + k ** 3 * p ** 3) * sinh_(k) + (- s16 - s8) * cosh_(k) + s16 + s8
    TacC2=(line1 + line2 + line3 + line4 + line5) / denom
    return TacC2
def TacC1_calc_(k=None,p=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 5-[k,p,fDc,fMag,a].count(None)+len(args)

    s14=sinh_(k * (a - 1))
    s13=2 * k * p ** 2 * sin_(a * p) * s14
    s12=k * (2 * a - 1)
    s11=2 * k ** 2 * p
    s10=2 * k ** 2 * p * cosh_(k)
    s9=2 * k ** 2 * p * cos_(a * p)
    s8=k * p ** 3 * cos_(a * p) * sinh_(k)
    s7=2 * k ** 2 * p * cos_(a * p) * cosh_(k)
    s6=2 * k * p ** 2 * sin_(a * p) * sinh_(k)
    s5=2 * a * k * p ** 3 * cos_(a * p) * sinh_(k)
    s4=2 * a * k ** 3 * p * cos_(a * p) * sinh_(k)
    s3=2 * k * p ** 2 * sinh_(a * k) * sin_(a * p)
    s2=k ** 2 * p * (k ** 2 + p ** 2) * (k * sinh_(k) - 2 * cosh_(k) + 2)
    s1=cosh_(k * (a - 1))
    dcLine1=2 * p ** 3 * cos_(a * p) - s11 + 4 * k ** 2 * sin_(a * p) + 4 * p ** 2 * sin_(a * p) - 4 * a * p ** 3 * cos_(a * p) + s9 - 2 * p ** 3 * cosh_(a * k) * cos_(a * p) + s10 - k ** 3 * p * sinh_(k) - 2 * p ** 3 * cos_(a * p) * cosh_(k) - 4 * k ** 2 * sin_(a * p) * cosh_(k) - 4 * p ** 2 * sin_(a * p) * cosh_(k) + 2 * k ** 3 * sin_(a * p) * sinh_(k) + 2 * p ** 3 * cos_(a * p) * s1
    dcLine2=s8 + k ** 3 * p * cos_(a * p) * sinh_(k) + s6 + k * p ** 3 * cos_(a * p) * s14 - k ** 2 * p ** 2 * cosh_(a * k) * sin_(a * p) - s13 - k ** 2 * p ** 2 * sin_(a * p) * s1 - 4 * a * k ** 2 * p * cos_(a * p) + k * p ** 3 * cos_(a * p) * sinh_(a * k) + s3 + 4 * a * p ** 3 * cos_(a * p) * cosh_(k) - s7 + 4 * a * k ** 2 * p * cos_(a * p) * cosh_(k) - s5 - s4
    magLine1=s11 + 2 * k ** 2 * p * cosh_(a * k) - s9 - s10 + 2 * k ** 3 * p * sinh_(k) - 2 * k ** 2 * p * s1 - s8 - 2 * k ** 3 * p * cos_(a * p) * sinh_(k) + 2 * k ** 2 * p * cos_(a * p) * s1 + s6 - 2 * k * p ** 3 * cos_(a * p) * s14 + s13 - k ** 2 * p ** 2 * sin_(a * p) * cosh_(k) + k * p ** 3 * sinh_(s12) * cos_(a * p)
    magLine2=2 * k ** 2 * p ** 2 * sin_(a * p) * s1 - 2 * k ** 2 * p * cosh_(a * k) * cos_(a * p) - 2 * a * k ** 3 * p * sinh_(k) - s3 - k ** 2 * p ** 2 * cosh_(s12) * sin_(a * p) + s7 - 2 * a * k * p ** 3 * cos_(a * p) * sinh_(a * k) + s5 + s4 + 2 * a * k * p ** 3 * cos_(a * p) * s14 + 2 * a * k ** 2 * p ** 2 * cosh_(a * k) * sin_(a * p) - 2 * a * k ** 2 * p ** 2 * sin_(a * p) * s1
    TacC1=fDc * 2 * (dcLine1 + dcLine2) / s2 - fMag * 2 * (magLine1 + magLine2) / s2
    return TacC1
def TacE_calc_(k=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 4-[k,fDc,fMag,a].count(None)+len(args)

    C=copy_(fDc)
    M=copy_(fMag)
    TacE=(- (32 * cosh_(k) - 8 * cosh_(2 * k) + 10 * k * sinh_(2 * k) - 3 * k ** 3 * sinh_(k) - 4 * k ** 2 * cosh_(2 * k) + (k ** 3 * sinh_(2 * k)) / 2 - 20 * k * sinh_(k) + k ** 4 + 4 * k ** 2 * cosh_(k) + k ** 4 * cosh_(k) - 24) / (k ** 4 * (cosh_(k) - 1) * (4 * cosh_(k) - 4 * k * sinh_(k) + k ** 2 + k ** 2 * cosh_(k) - 4))) * C ** 2 + (- (4 * k * sinh_(2 * k) - 6 * k ** 3 * sinh_(k) - 8 * k ** 2 * cosh_(k * (a - 1)) + 4 * k ** 2 * cosh_(k * (a - 2)) - 6 * k ** 3 * sinh_(k * (a - 1)) + 2 * k ** 3 * sinh_(k * (a + 1)) + 2 * k ** 3 * sinh_(k * (a - 2)) - (k ** 3 * sinh_(2 * k * (a - 1))) / 2 - 4 * k ** 2 * cosh_(2 * k) + (3 * k ** 3 * sinh_(2 * k)) / 2 + 12 * k * sinh_(a * k) + 2 * k ** 3 * sinh_(k * (2 * a - 1)) - 4 * a * k ** 4 - 8 * k * sinh_(k) + 4 * k ** 2 * cosh_(a * k) - 4 * k ** 4 * cosh_(a * k) + k ** 4 * cosh_(2 * a * k) - 12 * k * sinh_(k * (a - 1)) - 4 * k * sinh_(k * (a + 1)) + 4 * k * sinh_(k * (a - 2)) + 2 * k ** 3 * sinh_(a * k) - (3 * k ** 3 * sinh_(2 * a * k)) / 2 - 4 * k ** 2 + 3 * k ** 4 + 4 * a ** 2 * k ** 4 + 8 * k ** 2 * cosh_(k) - 12 * a * k ** 2 * cosh_(a * k) + 6 * a * k ** 4 * cosh_(a * k) - a * k ** 4 * cosh_(2 * a * k) + 2 * a ** 2 * k ** 3 * sinh_(2 * k) - 8 * a * k ** 3 * sinh_(a * k) + 2 * a * k ** 3 * sinh_(2 * a * k) + 4 * a * k ** 4 * cosh_(k) + 4 * a * k ** 3 * sinh_(k) + 12 * a * k ** 2 * cosh_(k * (a - 1)) + 4 * a * k ** 2 * cosh_(k * (a + 1)) - 4 * a * k ** 2 * cosh_(k * (a - 2)) - 2 * a * k ** 4 * cosh_(k * (a - 1)) - 2 * a * k ** 4 * cosh_(k * (a + 1)) - 2 * a * k ** 4 * cosh_(k * (a - 2)) + a * k ** 4 * cosh_(2 * k * (a - 1)) - 2 * a ** 2 * k ** 4 * cosh_(a * k) + 16 * a * k ** 3 * sinh_(k * (a - 1)) - 8 * a * k ** 3 * sinh_(k * (a - 2)) + 2 * a * k ** 3 * sinh_(2 * k * (a - 1)) + 12 * a ** 2 * k ** 3 * sinh_(a * k) - 4 * a ** 2 * k ** 4 * cosh_(k) - 2 * a * k ** 3 * sinh_(2 * k) - 4 * a ** 2 * k ** 3 * sinh_(k) - 2 * a ** 2 * k ** 4 * cosh_(k * (a - 1)) + 2 * a ** 2 * k ** 4 * cosh_(k * (a + 1)) + 2 * a ** 2 * k ** 4 * cosh_(k * (a - 2)) - 4 * a * k ** 3 * sinh_(k * (2 * a - 1)) - 12 * a ** 2 * k ** 3 * sinh_(k * (a - 1)) - 4 * a ** 2 * k ** 3 * sinh_(k * (a + 1)) + 4 * a ** 2 * k ** 3 * sinh_(k * (a - 2))) / (k ** 4 * (cosh_(k) - 1) * (4 * cosh_(k) - 4 * k * sinh_(k) + k ** 2 + k ** 2 * cosh_(k) - 4))) * M ** 2 + (4 * C * M * k ** 2 - 2 * C * M * k ** 4 + 8 * C * M * k * sinh_(k) - 4 * C * M * k ** 2 * cosh_(a * k) + 2 * C * M * k ** 4 * cosh_(a * k) + 12 * C * M * k * sinh_(k * (a - 1)) + 4 * C * M * k * sinh_(k * (a + 1)) - 4 * C * M * k * sinh_(k * (a - 2)) + C * M * k ** 3 * sinh_(a * k) - 8 * C * M * k ** 2 * cosh_(k) - 2 * C * M * k ** 4 * cosh_(k) - 4 * C * M * k * sinh_(2 * k) + 6 * C * M * k ** 3 * sinh_(k) + 8 * C * M * k ** 2 * cosh_(k * (a - 1)) - 4 * C * M * k ** 2 * cosh_(k * (a - 2)) + C * M * k ** 4 * cosh_(k * (a - 1)) + C * M * k ** 4 * cosh_(k * (a + 1)) + 3 * C * M * k ** 3 * sinh_(k * (a - 1)) - 3 * C * M * k ** 3 * sinh_(k * (a + 1)) - C * M * k ** 3 * sinh_(k * (a - 2)) + 4 * C * M * k ** 2 * cosh_(2 * k) - C * M * k ** 3 * sinh_(2 * k) - 12 * C * M * k * sinh_(a * k) - 12 * C * M * a * k ** 2 * cosh_(k * (a - 1)) - 4 * C * M * a * k ** 2 * cosh_(k * (a + 1)) + 4 * C * M * a * k ** 2 * cosh_(k * (a - 2)) + C * M * a * k ** 4 * cosh_(k * (a - 1)) - C * M * a * k ** 4 * cosh_(k * (a + 1)) + C * M * a * k ** 4 * cosh_(k * (a - 2)) - 4 * C * M * a * k ** 3 * sinh_(k * (a - 1)) + 4 * C * M * a * k ** 3 * sinh_(k * (a + 1)) + 4 * C * M * a * k ** 3 * sinh_(k * (a - 2)) + 12 * C * M * a * k ** 2 * cosh_(a * k) - C * M * a * k ** 4 * cosh_(a * k) - 4 * C * M * a * k ** 3 * sinh_(a * k)) / (k ** 4 * (cosh_(k) - 1) * (4 * cosh_(k) - 4 * k * sinh_(k) + k ** 2 + k ** 2 * cosh_(k) - 4))
    return TacE
def TacC1_calc_old_(k=None,p=None,fDc=None,fMag=None,a=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 5-[k,p,fDc,fMag,a].count(None)+len(args)

    C=copy_(fDc)
    M=copy_(fMag)
    s20=cosh_(k * (1 - a))
    s19=4 * M * k ** 2 * p * s20
    s18=8 * C * k ** 2
    s17=8 * C * p ** 2
    s16=2 * k ** 4 * p
    s15=k - 2 * a * k
    s14=8 * C * a * p ** 3
    s13=2 * C * k * p ** 3
    s12=2 * C * k ** 3 * p
    s11=4 * C * k * p ** 2
    s10=4 * M * k * p ** 2
    s9=4 * M * k ** 3 * p
    s8=8 * C * a * k ** 2 * p
    s7=4 * M * a * k * p ** 3
    s6=4 * M * a * k ** 3 * p
    s5=2 * k ** 2 * p ** 3
    s4=4 * C * p ** 3
    s3=4 * C * k ** 2 * p
    s2=sinh_(k * (1 - a))
    s1=4 * M * k ** 2 * p
    denom=(k ** 5 * p + k ** 3 * p ** 3) * sinh_(k) + (- s16 - s5) * cosh_(k) + s16 + s5
    line1=(s1 - s4) * cos_(a * p) * cosh_(a * k) + (s13 + s12 + 2 * M * k * p ** 3 + s9 - 4 * C * a * k * p ** 3 - 4 * C * a * k ** 3 * p - s7 - s6) * cos_(a * p) * sinh_(k) + (s13 + s7) * cos_(a * p) * sinh_(a * k)
    line2=(s14 - s4 - s3 - s1 - s8) * cos_(a * p) * cosh_(k) + (s4 + 4 * C * p ** 3 * s20 - s14 + s3 + s1 - s8 - s19 - 2 * C * k * p ** 3 * s2 - 4 * M * k * p ** 3 * s2 + 2 * M * k * p ** 3 * sinh_(s15) + 4 * M * a * k * p ** 3 * s2) * cos_(a * p)
    line3=(- 2 * C * k ** 2 * p ** 2 - 4 * M * a * k ** 2 * p ** 2) * sin_(a * p) * cosh_(a * k) + (4 * C * k ** 3 + s11 - s10) * sin_(a * p) * sinh_(k) + (s11 + s10) * sin_(a * p) * sinh_(a * k) + (2 * M * k ** 2 * p ** 2 - s18 - s17) * sin_(a * p) * cosh_(k)
    line4=(s18 + s17 + 4 * C * k * p ** 2 * s2 + 4 * M * k * p ** 2 * s2 - 2 * C * k ** 2 * p ** 2 * s20 - 4 * M * k ** 2 * p ** 2 * s20 + 2 * M * k ** 2 * p ** 2 * cosh_(s15) + 4 * M * a * k ** 2 * p ** 2 * s20) * sin_(a * p) - s1 * cosh_(a * k) + (s6 - s9 - s12) * sinh_(k)
    line5=(s3 + s1) * cosh_(k) + s19 - s1 - s3
    TacC1=(line1 + line2 + line3 + line4 + line5) / denom
    return TacC1
def TacEmag_calc_(a=None,k=None,lMagPrime=None,lDcPrime=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 4-[a,k,lMagPrime,lDcPrime].count(None)+len(args)

    sigma1=sinh_(k * (a - 1))
    sigma2=sinh_(k * (a - 2))
    sigma3=sinh_(k * (a + 1))
    sigma4=cosh_(k * (a - 2))
    sigma5=cosh_(k * (a - 1))
    sigma6=cosh_(k * (a + 1))
    sigma7=sinh_(k * (2 * a - 1))
    sigma8=sinh_(2 * a * k)
    sigma9=cosh_(2 * a * k)
    sigma10=2 * k * (a - 1)
    sinhk=sinh_(k)
    sinhak=sinh_(a * k)
    sinh2k=sinh_(2 * k)
    coshk=cosh_(k)
    coshak=cosh_(a * k)
    cosh2k=cosh_(2 * k)
    line1=8 * k - 8 * sinh2k - 24 * sinhak + 16 * sinhk + 24 * sigma1 + 8 * sigma3 - 8 * sigma2 + 12 * k ** 2 * sinhk + 12 * k ** 2 * sigma1 - 4 * k ** 2 * sigma3 - 4 * k ** 2 * sigma2 + k ** 2 * sinh_(sigma10) - 8 * k * coshak - 3 * k ** 2 * sinh2k - 4 * k ** 2 * sigma7 + 8 * a * k ** 3 - 16 * k * cosh_(k) + 16 * k * sigma5 - 8 * k * sigma4
    line2=8 * k ** 3 * coshak - 2 * k ** 3 * sigma9 - 4 * k ** 2 * sinhak + 3 * k ** 2 * sigma8 - 6 * k ** 3 - 8 * a ** 2 * k ** 3 + 8 * k * cosh2k - 24 * a * k * sigma5 - 8 * a * k * sigma6 + 8 * a * k * sigma4 - 12 * a * k ** 3 * coshak + 2 * a * k ** 3 * sigma9 - 4 * a ** 2 * k ** 2 * sinh2k + 16 * a * k ** 2 * sinhak - 4 * a * k ** 2 * sigma8 - 8 * a * k ** 3 * coshk
    line3=- 8 * a * k ** 2 * sinhk + 4 * a * k ** 3 * sigma5 + 4 * a * k ** 3 * sigma6 + 4 * a * k ** 3 * sigma4 - 2 * a * k ** 3 * cosh_(sigma10) + 4 * a ** 2 * k ** 3 * coshak - 32 * a * k ** 2 * sigma1 + 16 * a * k ** 2 * sigma2 - 4 * a * k ** 2 * sinh_(sigma10) - 24 * a ** 2 * k ** 2 * sinhak + 8 * a ** 2 * k ** 3 * coshk + 24 * a * k * coshak + 4 * a * k ** 2 * sinh2k
    line4=8 * a ** 2 * k ** 2 * sinhk + 4 * a ** 2 * k ** 3 * (sigma5 - sigma6 - sigma4) + 8 * a * k ** 2 * sigma7 + 24 * a ** 2 * k ** 2 * sigma1 + 8 * a ** 2 * k ** 2 * (sigma3 - sigma2)
    if k > 0.05:
        denom=2 * k ** 3 * (coshk - 1) * (4 * coshk - 4 * k * sinhk + k ** 2 + k ** 2 * coshk - 4)
    else:
        denom=k ** 6 / 72 + k ** 8 / 1440 + k ** 10 / 67200
    part1=lMagPrime ** 2 * (line1 + line2 + line3 + line4) / denom
    if k > 0.05:
        line5=2 * k - 2 * sinh2k - 6 * sinhak + 4 * sinhk + 6 * sigma1 + 2 * sigma3 - 2 * sigma2 + 2 * k ** 2 * sinhk + k ** 2 * (sigma1 - sigma3) - 3 * k * coshak - 4 * k * coshk + 3 * k * sigma5 + k * sigma6 - k * sigma4 + 2 * k * coshk ** 2 - 6 * a * k * sigma5 - 2 * a * k * sigma6 + 2 * a * k * sigma4 - a * k ** 2 * sinhak - a * k ** 2 * sigma1 + a * k ** 2 * sigma3 + a * k ** 2 * sigma2 + 6 * a * k * coshak
    else:
        line5=a ** 2 * (a - 1) ** 2 * (k ** 9 / 72 + k ** 11 * (4 * a ** 2 - 4 * a + 7) / 4320)
    denom2=k ** 3 * (coshk - 1) * (k * sinhk - 2 * coshk + 2)
    part2=- lMagPrime * lDcPrime * line5 / denom2
    TacEmag=part1 + part2
    return TacEmag
